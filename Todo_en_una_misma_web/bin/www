#!/usr/bin/env node


/* Imports */
var app = require('../app');
var debug = require('debug')('express-template-no-views:server');
var https = require('https');
const redirectSsl = require('redirect-ssl');
const fs = require('fs');


/* Servidor HTTPS */
const options = {
  key: fs.readFileSync('ssl/private.key'),
  cert: fs.readFileSync('ssl/certificate.crt'),
};
var server = https.createServer(options, app);
var port = normalizePort(process.env.PORT || '443');
server.listen(port);

/* Redireccion HTTP hacia HTTPS*/
app.listen(3000);
app.use(redirectSsl);
debug("Escuchando el puerto 3000 y redireccionando hacia https");


//Imprimir por consola los eventos
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
